name: Create Draft Release

on:
  pull_request:
    types: [closed]
    branches:
      - master
  workflow_dispatch:

jobs:
  create-draft-release:
    runs-on: [self-hosted, Linux]
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Mac artifacts
        uses: actions/github-script@v6
        id: download-mac-artifacts
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflows = await github.rest.actions.listRepoWorkflows({ owner, repo });
            const macWorkflow = workflows.data.workflows.find(w => w.name === 'upload build artifact mac');

            if (macWorkflow) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: macWorkflow.id,
                branch: 'dev',
                per_page: 1,
                status: 'success'
              });

              if (runs.data.workflow_runs.length > 0) {
                const runId = runs.data.workflow_runs[0].id;
                const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                  owner,
                  repo,
                  run_id: runId
                });

                for (const artifact of artifacts.data.artifacts) {
                  if (artifact.name === 'EmotiBitSoftware-macos') {
                    const download = await github.rest.actions.downloadArtifact({
                      owner,
                      repo,
                      artifact_id: artifact.id,
                      archive_format: 'zip'
                    });
                    
                    const fs = require('fs');
                    fs.writeFileSync('EmotiBitSoftware-macos.zip', Buffer.from(download.data));
                    core.setOutput('mac-artifact-downloaded', 'true');
                    break;
                  }
                }
              }
            }

      - name: Download Windows artifacts
        uses: actions/github-script@v6
        id: download-win-artifacts
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflows = await github.rest.actions.listRepoWorkflows({ owner, repo });
            const winWorkflow = workflows.data.workflows.find(w => w.name === 'upload build artifact Windows');

            if (winWorkflow) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: winWorkflow.id,
                branch: 'dev',
                per_page: 1,
                status: 'success'
              });

              if (runs.data.workflow_runs.length > 0) {
                const runId = runs.data.workflow_runs[0].id;
                const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                  owner,
                  repo,
                  run_id: runId
                });

                for (const artifact of artifacts.data.artifacts) {
                  if (artifact.name === 'EmotiBitSoftware-Windows') {
                    const download = await github.rest.actions.downloadArtifact({
                      owner,
                      repo,
                      artifact_id: artifact.id,
                      archive_format: 'zip'
                    });
                    
                    const fs = require('fs');
                    fs.writeFileSync('EmotiBitSoftware-Windows.zip', Buffer.from(download.data));
                    core.setOutput('win-artifact-downloaded', 'true');
                    break;
                  }
                }
              }
            }

      - name: Generate release notes
        id: generate-release-notes
        run: |
          RELEASE_NOTES=$(cat <<-END_OF_NOTES
          # New features and bug fixes

          # Firmware Installed by FirmwareInstaller
          EmotiBit firmware [`vx.x.x`](enter-url-here)

          # PRs completed

          # Installation
          #### Windows
          - Download the `EmotiBitSoftware-Windows.zip` linked below.
          - Extract the zip file downloaded
          - run the `.msi` installer file.
            - If the **Windows Defender Smartscreen** pops up, click on `More info` and `Run anyway`
          - The `EmotiBit Oscilloscope` and `EmotiBit DataParser` will be installed on your system.
          - You can access the software from the `Start` menu under `EmotiBit` or from the desktop shortcut.

          #### macOS
          - Download `EmotiBitSoftware-macOS`
          - Extract the downloaded zip file. 
          - The extracted folder will contain `EmotiBit Oscilloscope` and `EmotiBit DataParser`.
            - Right-click and select `Open` to run the executables

          #### Linux
          - Download the source code linked below. Follow the steps in the [ReadMe](https://github.com/EmotiBit/ofxEmotiBit#readme).


          END_OF_NOTES
          )
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Get version from source
        id: get_version
        run: |
          VERSION=$(grep src/ofxEmotiBitVersion.h -e "ofxEmotiBitVersion" | grep -o '"[^"]*"' | tr -d '"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create config.txt
        id: create-config
        run: |
          CONFIG_CONTENT=$(cat <<-END_OF_CONFIG
          {
            "WifiCredentials": [
              {
                "ssid": "YOUR_WIFI_NAME_GOES_HERE",
                "password": "YOUR_WIFI_PASSWORD_GOES_HERE"
              }
            ]
          }
          END_OF_CONFIG
          )
          echo "$CONFIG_CONTENT" > config.txt
          echo "Config file created successfully"

      - name: Create Draft Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Draft Release ${{ steps.get_version.outputs.tag }}
          body: ${{ steps.generate-release-notes.outputs.release_notes }}
          files: |
            EmotiBitSoftware-macos.zip
            EmotiBitSoftware-Windows.zip
            config.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
